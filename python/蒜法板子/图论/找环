def bfs():
    s = set()
    q = deque([b])
    p = [0] * (n + 1)
    p[b] = b
    while q:
        node = q.pop()
        if node in s:
            return node
        s.add(node)
        for x in g[node]:
            if x != p[node]:
                p[x] = node
                q.append(x)
t = II()
for _ in range(t):
    n, a, b = MII()
    g = [[] for _ in range(n + 1)]
    for _ in range(n):
        u, v = MII()
        g[u].append(v)
        g[v].append(u)
    d = [-1] * (n + 1)

    root = bfs()    
    d[root] = 0
    q = deque([root])
    while q:
        node = q.popleft()
        for x in g[node]:
            if d[x] == -1:
                d[x] = d[node] + 1
                q.append(x)
    print("YES" if d[a] > d[b] else "NO")